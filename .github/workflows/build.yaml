name: Build and Test Operator

on:
  workflow_dispatch:
    inputs:
#      image_tag:
#        description: 'Tag for the operator image'
#        required: true
#        default: 'latest'
      push_image:
        description: 'Push image to registry'
        type: boolean
        default: true
        required: false

env:
  REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
  IMAGE_REGISTRY: ${{ secrets.IMAGE_REGISTRY }} # e.g., quay.io, ghcr.io
  IMAGE_NAME: ${{ secrets.IMAGE_NAME || 'fanet-operator' }} # Default image name if not set
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: Buildx and push operator image
      run: make docker-buildx IMG=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

#    - name: Build and push operator image
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        push: ${{ inputs.push_image }}
#        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
#        cache-from: type=gha
#        cache-to: type=gha,mode=max

#    - name: Run tests
#      run: |
#        make test
#
#    - name: Build operator binary
#      run: |
#        make build
#
#    - name: Verify operator binary
#      run: |
#        ./bin/manager --version
#
#    - name: Run linter
#      uses: golangci/golangci-lint-action@v3
#      with:
#        version: latest
#
#    - name: Check generated files
#      run: |
#        make generate
#        git diff --exit-code
#
#    - name: Build CRD manifests
#      run: |
#        make manifests
#        make build-installer
#
#    - name: Upload artifacts
#      uses: actions/upload-artifact@v4
#      with:
#        name: operator-artifacts
#        path: |
#          bin/manager
#          dist/install.yaml
#        if-no-files-found: error